% find solution (theta0) for given beta0, W0 and particle mass m
function varargout = theta0_W0(varargin)
Q = lib.module.struct(...
	'nlinfit', {},...
	varargin{:} ...
);

% destructure (necessary parameter)
vm				= Q.model;		% model struct
list			= Q.list;		% response list (lib.module.ProfileResponseList)
nlinfitCascade	= Q.nlinfit;	% set gosect options cascade

lib.module.constraints

% set iteration print function
sPrec	= '%1.12e';
sStrong = ['<strong>' sPrec '</strong>'];
sFormat = strjoin({sPrec,sPrec,sStrong,sStrong,'%1.3e\n'},'\t');
fLog	= @(SOL) fprintf(sFormat,SOL.data.m/keVcc,SOL.data.beta0,SOL.data.theta0,SOL.data.W0,list.chi2(SOL));

% set update function
fUpdate = @(b,vm) struct(...
	'param', struct(...
		'm',		vm.param.m,...
		'beta0',	vm.param.beta0,...
		'theta0',	b(1),...
		'W0',		exp(b(2)) ...
	),...
	'options',	vm.options ...
);

% set model function
fModel = @(SOL) struct(...
	'param', struct(...
		'm',		SOL.data.m,...
		'beta0',	SOL.data.beta0,...
		'theta0',	SOL.data.theta0,...
		'W0',		SOL.data.W0 ...
	),...
	'options',	vm.options ...
);

[varargout{1:nargout}] = lib.model.tov.rar.nlinfit.theta0_W0(vm,list,...
	'fUpdate',			fUpdate,...
	'fModel',			fModel,...
	'fLog',				fLog,...
	nlinfitCascade{:} ...
);