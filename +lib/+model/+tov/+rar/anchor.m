% helpers
findGlobalMaximum	= @(x) find(findpeaks(x)==max(findpeaks(x)));
findGlobalMinumum	= @(x) find(-findpeaks(-x)==min(-findpeaks(-x)));

fcore		= @(X,Y) lib.get_extrema(X, Y, 1);
fplateau	= @(X,Y) lib.get_extrema(X,-Y, findGlobalMinumum(Y));
fhalo		= @(X,Y) lib.get_extrema(X, Y, findGlobalMinumum(Y)+1);


% load packages
MAP			= lib.require(@lib.model.tov.rar.map);
AXIS		= lib.require(@lib.model.tov.rar.axes.astro);


% center (r=0)
EXPORT.center = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) obj.data.radius(1)...
);


% core based on rotation curve
EXPORT.velocity_core = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) exp(fcore(log(X),log(MAP.velocity.map(obj))))...
);

EXPORT.velocity_plateau = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fplateau(X,MAP.velocity.map(obj))...
);

EXPORT.velocity_halo = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fhalo(X,MAP.velocity.map(obj))...
);


% core based on mass profile
EXPORT.mass_core = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fcore(X,MAP.massDiff.map(obj))...
);

EXPORT.mass_plateau = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fplateau(X,MAP.massDiff.map(obj))...
);

EXPORT.mass_halo = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fhalo(X,MAP.massDiff.map(obj))...
);


% core based on degeneracy curve
EXPORT.degeneracy_core = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fcore(X,-MAP.degeneracyDiff.map(obj))...
);

EXPORT.degeneracy_plateau = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fplateau(X,-MAP.degeneracyDiff.map(obj))...
);

EXPORT.degeneracy_halo = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fhalo(X,-MAP.degeneracyDiff.map(obj))...
);


% core based on compactness curve
EXPORT.compactness_core = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fcore(X,-MAP.compactness.map(obj))...
);

EXPORT.compactness_plateau = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fplateau(X,-MAP.compactness.map(obj))...
);

EXPORT.compactness_halo = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fhalo(X,-MAP.compactness.map(obj))...
);


% based on potential curve
EXPORT.potential_core = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fcore(X,MAP.potentialDiff.map(obj))...
);

EXPORT.potential_plateau = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fplateau(X,MAP.potentialDiff.map(obj))...
);

EXPORT.potential_halo = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) fhalo(X,MAP.potentialDiff.map(obj))...
);


% surface (r = r_s where density falls to 0)
EXPORT.surface = lib.module.ProfileAnchor(...
	@(obj) MAP.radius.map(obj),...
	@(obj,X) obj.data.radius(end)...
);
